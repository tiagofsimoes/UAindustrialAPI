/**
 ** Simple ROS Subscriber Node
 **/
#include <ros/ros.h>
#include <primeiro/PathPosition.h> // TODO: Uncomment this line
#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/planning_scene/planning_scene.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>



void positionCallback(const primeiro::PathPosition pose)
{
  	
    ROS_INFO("New position: %f %f", pose.position.x,pose.orientation.y);
    moveit::planning_interface::MoveGroup group("manipulator");
  	moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
  	geometry_msgs::Pose pose1,pose2;
  	
    pose1.position.x=pose.position.x;
    pose1.position.y=pose.position.y;
    pose1.position.z=pose.position.z;
    
    pose1.orientation.x=pose.orientation.x;
    pose1.orientation.y=pose.orientation.y;
    pose1.orientation.z=pose.orientation.z;
    pose1.orientation.w=pose.orientation.w;
    
    
//    if(pose2
	//    ros::waitForShutdown();
//		ROS_INFO("PASSEI AQUI000");
		group.setPoseTarget(pose1);
//		ROS_INFO("PASSEI AQUI111");
		group.move();
		ROS_INFO("POSICAO ATINGIDA!!!!");
		
//	}
}



int main(int argc, char* argv[])
{
    ros::init(argc, argv, "MOTION_subscriber");
    ros::NodeHandle node;
    
      // start a background "spinner", so our node can process ROS messages
    //  - this lets us know when the move is completed
    ros::AsyncSpinner spinner(1);
    spinner.start();
  
//    while(1) {
		// TODO: Uncomment the next 2 lines
		ros::Subscriber subscriber = node.subscribe("position", 1000, positionCallback);
		
		ros::spin();

//	}

    return 0;
}
